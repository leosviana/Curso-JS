########################### MODULO A ###########################
var (Variável)
let (Variável - JS moderno)

TIPOS DE DADOS:
number - Variáveis númericas
  - 1 (inteiro)
  - 5.3 (real)
  - Infinity
  - NaN
string - Variáveis letras, conjunto de números...
  - "Google"
  - 'JavaScript'
  - `Maria`
  - "16-99221-3688"
boolean - Verdadeiro ou falso
  - true
  - false
null
undefined
object
array
function
typeof - Cabe qualquer tipo de variável

Exemplo de declaração:
var nome = "Maria"
var texto = window.prompt('Escreva texto: '); //Armazena o texto na variavel [texto]
window.alert('Texto é: ', texto, '!'); //Exibe o texto

########################### MODULO B ###########################
CONVERTER VARIAVEIS:
Number.parseInt(n) - Converte string em número inteiro (1, 2, 3, ...)
Number.parseFloat(n) - Converte string em número real (5.6, 1.8, ...)
Number(n) - Converte string em qualquer tipo de número (Mais usado atualmente)
String(n) - Converte qualquer número em string
n.toString() - Converte qualquer número em string

EXIBINDO INFORMAÇÕES:
var s = 'JavaScript'
'Eu estou aprendendo s' //Não faz interpolação
'Eu estou aprendendo + s' //Usa concatenação
`Eu estou aprendendo ${s}` //Placeholder - Usa template string. Usa crase na frase.

FORMATANDO STRING:
var s = 'JavaScript'
s.length //Um atributo - Exibe a qtd. de caracteres da string
s.toUpperCase() //Função - Aumenta letras para maiúsculas
s.toLowerCase() //Função - Diminiu letras para minúsculas

FORMATANDO NÚMEROS:
n1 = 1545.5
n1.toFixed(2) //Deixa com 2 casas decimais (1545.50)
n1.toFixed(2).replace('.', ',') //Altera o '.' por vírgula ',' (1545,50)
n1.toLocateString('pt-BR', {style: 'currency', currency: 'BRL'}) //Transforma o valor em moeda (R$1,545.50)
n1.toLocateString('pt-BR', {style: 'currency', currency: 'BRL'}).replace(',', '.') //Transforma o valor em moeda (R$1.545.50)

OPERADORES ARITMÉTICOS/ATRIBUIÇÃO:
+ = Soma
- = Subtração
* = Multiplicação
/ = Divisão
% = Resto da divisão inteira
** = Potência (numero vezes ele mesmo várias vezes)
Ordem dos operadores: (), **, *, /, %, +, -

Simplificando:
n = 3
n = n + 4 (n += 4)
n = n - 5 (n -= 5)
n = n * 4 (n *= 5)
n = n / 2 (n /= 5)
n = n ** 2 (n **= 5)
n = n % 2 (n %= 5)

++n = Pré-incremento (n+1) soma antes
n++ = Pós-incremento (n+1) soma depois

OPERADORES RELACIONAIS:
> (Maior)
< (Menor)
>= (Maior ou igual)
<= (Menor ou igual)
== (Igual)
!= (Diferente)

IDENTIDADE:
5 == 5 (TRUE - Mesmo valor)
5 == '5' (TRUE - Mesmo valor. Javascript olha o valor)
5 === '5' (FALSE - Igualdade restrita: Mesmo valor e tipo diferente)

OPERADORES LÓGICOS:
! (Negação)
TRUE! = FALSE
FALSE! = TRUE

&& (E)
TRUE && TRUE = TRUE
TRUE && FALSE =FALSE
FALSE && TRUE = FALSE
FALSE && FALSE = FALSE

|| (OU)
TRUE || TRUE = TRUE
TRUE || FALSE =TRUE
FALSE || TRUE = TRUE
FALSE || FALSE = FALSE

OPERADOR TERNÁRIO:
TESTE ? TRUE : FALSE
Se teste = true, faça isso...
Se teste = false, faça aquilo...
Exemplo: (Média >= 5) ? 'Aprovado' : 'Reprovado'

Ordem de execução das regras: operadores aritméticos, operadores relacionais e operadores lógicos

########################### MODULO C ###########################
DOM (DOCUMENT OBJECT MODEL):
UTILIZADO PARA ALTERAR OS ELEMENTOS HTML (FRONTEND)
Selecionar por:
- Marca = getElementsByTagName() - Utiliza um conjunto de objetos. Representado por [0],[1],...
- ID = getElementById() - Utilizar um objeto inteiro ou uma familia de objeto.
- Nome = getElementsByName() - Utiliza um conjunto de objetos. Representado por [0],[1],...
- Classe = getElementsByClassName() - Utiliza um conjunto de objetos. Representado por [0],[1],...
- Seletor = 
  querySelector() - Retorna o primeiro ou unico elemento do objeto.
  querySelectorAll() - Retorna todos os elementos do objeto.

Executa um evento do mouse:
addEventListener('click', clicar); //NÃO ESQUECER DE CRIAR A FUNÇÃO "clicar" PARA EXECUTAR A AÇÃO
addEventListener('mouseenter', entrar); //NÃO ESQUECER DE CRIAR A FUNÇÃO "entrar" PARA EXECUTAR A AÇÃO
addEventListener('mouseout', sair); //NÃO ESQUECER DE CRIAR A FUNÇÃO "sair" PARA EXECUTAR A AÇÃO

FUNÇÕES:
function clicar(){
  a.innerText('Clicou!');
}
...

########################### MODULO D ###########################
CONDIÇÃO SIMPLES (if):
if(var > 10){
  faça isso...
}

CONDIÇÃO COMPOSTA (if..else):
if(var > 10){
  faça isso...
}else{
  senão faça aquilo...
}

CONDIÇÃO ANINHADA (if..elseif..else):
if(var > 10){
  faça isso...
  }else if{
    senão faça aquilo...
}else{
  senão fala aquilo outro...
}

CONDIÇÃO MULTIPLA (switch..case):
switch(var){
  case 1: ...
  break;
  case 2: ...
  break;
  ...
  default: ...
  break;
}

########################### MODULO E ###########################
ESTRUTURA DE REPETIÇÃO:
while(var <= 6){ //TESTA, DEPOIS EXECUTA
  repetir isso...
}

do{ //EXECUTA, DEPOIS TESTA
  repetir isso...
}while(var <= 6)

ESTRUTURA DE REPETIÇÃO COM VARIÁVEL DE CONTROLE:
for(contador = 1; contador <=6; contador++){
  repetir isso...
}

FOR SIMPLIFICADO:
let num = [8, 1, 7, 4, 2, 9]; //ARRAY
for(let pos in num){ //PARA CADA POSIÇÃO DENTRO(IN) DO ARRAY NUMERO FAÇA... (FUNCIONA APENAS PARA ARRAY OU OBJETO)
    console.log(`${num[pos]}`);
}

########################### MODULO F ###########################
VARIÁVEIS COMPOSTAS:
  É um ARRAY(VETOR) com ELEMENTO contendo um KEY(ÍNDICE/CHAVE) em cada CONTEÚDO/VALOR.

Exemplo e declaração:
  let numeros = [5, 8, 4]; //VETOR "numeros" com ÍNDICE "0, 1 e 2" com os ELEMENTOS "5, 8 e 4".
  let vaga = ['carro1', 'carro2', 'carro3']; //STRING

numero[3] = 8 //INSERE O VALOR 8 NO ELEMENTO 3
numero.push(6) //METODO QUE INSERE UM VALOR SEMPRE NO ULTIMO ELEMENTO DO VETOR
numero.length //ATRIBUTO DE COMPRIMENTO: SABER A QUANTIDADE DE ELEMENTOS DO VETOR
numero.sort() //METODO INTERNO DE VETOR QUE ORDENA OS VALORES EM ORDEM CRESCENTE DENTRO DOS ELEMENTOS DO VETOR
  let numeros = [5, 8, 4, 3, 9]  >>> let numeros = [3, 4, 5, 8, 9]
numero.indexOf(4) //IDENTIFICAR ONDE ESTÁ O VALOR "3" E EXIBIR O ÍNDICE/CHAVE DO VETOR.
  let numeros = [5, 8, 4, 3, 9] >> INDICE 2
numero.indexOf(2) //IDENTIFICAR ONDE ESTÁ O VALOR "2" E EXIBIR O ÍNDICE/CHAVE DO VETOR.
  let numeros = [5, 8, 4, 3, 9] >> O VALOR 2 NÃO EXISTE, ENTÃO O RESULTADO É -1



